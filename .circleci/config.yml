# os: linux
# dist: ubuntu
# language: python
# cache: pip
# python: 3.8

# stages:
#   - test
#   - staging
#   - bastion
#   - prod
#   - deploy

# jobs:
#   include:


#   - name: Deploy
#     stage: deploy
#     if: |
#       type = push AND \
#       branch IN (master, staging)
#     script:
#       - echo "Deploy"
#     deploy:
#       - provider: script
#         edge: true
#         script: ci/deploy.sh staging
#         on:
#           branch: staging

# install:
#   - echo "Install dependencies"
#   - sudo chmod +x ci/*
#   - ci/install_dependencies.sh
#   - ci/aws_auth.sh

# version: 2.1

#   - name: Linting
#     stage: test
#     if: |
#       type = pull_request AND \
#       branch IN (master, staging)
#     before_script:
#       - git remote set-branches --add origin $TRAVIS_BRANCH
#       - git fetch
#     script:
#       - source ci/find_changed_files.sh
#       - ci/cfn_lint.sh
version: 2.1

commands:

  save_exit_code:
    description: Save status code to a file to be read later
    parameters:
      exit_code:
        type: integer
        default: 0
    steps:
      - attach_workspace:
          at: /tmp/
      - run:
          name: Save exit code
          command: |
            echo <<parameters.exit_code>> > /tmp/exit_code
      - persist_to_workspace:
          root: /
          paths:
            - tmp/exit_status

  setup:
    description: Checkout & Get name of target branch
    steps:
      - checkout
      - run:
          name: Get name of target branch
          command: |
            if [[ ! -z ${CIRCLE_PULL_REQUEST} ]]
            then
              curl -L "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" \
                -o jq
              chmod u+x jq
              pr_number="${CIRCLE_PULL_REQUEST##*/}"
              url="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${pr_number}"
              export TARGET_BRANCH=$(\
                  curl "$url" \
                  -H "Authorization: $GITHUB_TOKEN" \
                      | ./jq '.base.ref' \
                      |  tr -d '"' \
                  )
              if [[  "$TARGET_BRANCH" = "master" || "$TARGET_BRANCH" = "staging" ]]
              then
                echo "Target branch - $TARGET_BRANCH"
                echo "$TARGET_BRANCH" > /tmp/target_branch
              else
                echo "Target branch - $TARGET_BRANCH"
                echo "Cannot continue build on this branch"
                exit 1
              fi
            else
              echo "Build is not for a PR. Using current branch as the target branch"
              echo "$CIRCLE_BRANCH" > /tmp/target_branch

            fi
      - save_exit_code:
          exit_code: 1

  check_is_pr:
    description: Check if the current build is happening because of a PR
    steps:
      - run:
          name: Check if PR
          command: |
            if [[ ! -z ${CIRCLE_PULL_REQUEST} ]]
            then
              echo "Build is for pr ${CIRCLE_PR_NUMBER}"
              exit 0
            else
              echo "Build is not for a PR"
              exit 1
            fi

  check_is_push:
    description: Check if the current build is happening because of a PR
    steps:
      - run:
          name: Check if PR
          command: |
            if [[ ! -z ${CIRCLE_PULL_REQUEST} ]]
            then
              echo "Build is for pr ${CIRCLE_PULL_REQUEST}"
              exit 1
            else
              echo "Build is not for a push to the branch"
              exit 0
            fi

  check_branch:
    description: Check if target branch is correct
    parameters:
      allowed_branch:
        default: staging
        type: string
    steps:
      - run:
          name: Check target branch
          command: |
            target_branch="$(cat /tmp/target_branch)"
            if [[  "$target_branch" = "<<parameters.allowed_branch>>" ]]
            then
              echo "Target branch ${target_branch} = <<parameters.allowed_branch>>. Continuing ..."
              exit 0
            else
              echo "Target branch ${target_branch} != <<parameters.allowed_branch>>. Stopping."
              exit 1
            fi

  install_dependencies:
    description: Install all dependencies
    parameters:
      allowed_branch:
        default: staging
        type: string
    steps:
      - run:
          name: Install dependencies
          command: |
            ./ci/install_dependencies.sh
            python -m pip install toml


jobs:

  lint:
    docker:
      - image: cimg/python:3.8
    steps:
      - setup
      - run:
          name: Linting
          command: . ./ci/find_changed_files.sh  "$(cat /tmp/target_branch)" && ./ci/cfn_lint.sh

  build_staging:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: staging
    steps:
      - check_is_pr
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: staging
      - run:
          name: Build Staging
          command: ci/apply_sam_workflow_pr.sh staging
      - save_exit_code:
          exit_code: 0

  build_bastion:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: bastion
    steps:
      - check_is_pr
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: master
      - run:
          name: Build Bastion
          command: ci/test_sam_workflow_pr.sh master
      - save_exit_code:
          exit_code: 0

  build_prod:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: prod
    steps:
      - check_is_pr
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: master
      - run:
          name: Build Prod
          command: ci/test_sam_workflow_pr.sh master
      - save_exit_code:
          exit_code: 0

  deploy_staging:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: staging
    steps:
      - check_is_push
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: staging
      - run:
          name: Deploy Staging
          command: ci/deploy.sh staging
      - save_exit_code:
          exit_code: 0

  deploy_bastion:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: bastion
    steps:
      - check_is_push
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: master
      - run:
          name: Deploy Bastion
          command: ci/deploy.sh bastion
      - save_exit_code:
          exit_code: 0

  deploy_prod:
    docker:
      - image: cimg/python:3.8
    environment:
      ENVIRONMENT: prod
    steps:
      - check_is_push
      - setup
      - install_dependencies
      - check_branch:
          allowed_branch: master
      - run:
          name: Deploy Prod
          command: ci/deploy.sh prod
      - save_exit_code:
          exit_code: 0

  determine_success_state:
    docker:
      - image: cimg/python:3.8
    steps:
      # - run:
      #     name: Wait until jobs are finished
      #     command: |
      #       while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CCI_TOKEN"| jq -r '.items[]|select(.name != "waiter")|.status' | grep -c "running") -gt 0 ]]
      #         do
      #           sleep 10
      #         done
      # - run: echo "All required jobs have now completed"
      - attach_workspace:
          at: /tmp/
      - run:
          name: Determine success
          command: |
            exit_status="$(cat /tmp/exit_status)"
            if [[ "$exit_status" = 0 ]]
            then
              exit 0
            else
              exit 1
            fi


workflows:
    version: 2
    test-build-staging:
      jobs:
        - lint
            # filters:
            #   branches:
            #     only:
            #       - master
            #       - staging
            #       - circleci
#             filters:
#               tags:
#                 only: /^v\d+\.\d+\.\d+(-alpha\.\d+)?$/
        - build_staging:
            requires:
              - lint
        - determine_success_state:
            requires:
              - build_staging
        - build_bastion:
            requires:
              - lint
        - determine_success_state:
            requires:
              - build_bastion
        - build_prod:
            requires:
              - lint
        - determine_success_state:
            requires:
              - build_prod
        - deploy_staging:
            requires:
              - lint
        - determine_success_state:
            requires:
              - deploy_staging
        - deploy_bastion:
            requires:
              - lint
        - determine_success_state:
            requires:
              - deploy_bastion
        - deploy_prod:
            requires:
              - lint
        - determine_success_state:
            requires:
              - deploy_prod


#   deploy:
#     machine:
#       image: ubuntu-2004:202107-02
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: chmod u+x ./ci/** && ./ci/install_aws_cli
#       - run:
#           name: Authenticate
#           command: ./ci/aws_auth && chmod u+x ./cd/** && ./cd/docker_auth bastion
#       - run:
#           name: Build Docker image
#           command: ./cd/docker_build understat-crawler $CIRCLE_TAG
#       - run:
#           name: Deploy Docker image
#           command: ./cd/docker_push understat-crawler $CIRCLE_TAG
#       - run:
#           name: Clean up untagged images
#           command: ./cd/docker_remove_untagged_images understat-crawler bastion

# workflows:
#     version: 2
#     test-build-deploy:
#       jobs:
#         - test:
#             filters:
#               tags:
#                 only: /^v\d+\.\d+\.\d+(-alpha\.\d+)?$/
#         - deploy:
#             requires:
#               - test
#             filters:
#               branches:
#                 ignore: /.*/
#               tags:
#                 only: /^v\d+\.\d+\.\d+(-alpha\.\d+)?$/


