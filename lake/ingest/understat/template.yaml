AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Ingest data from understat.com into lake

Parameters:

  Environment:
    Description: The account where the resources are being created
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - prod

  # LogRetentionInDays:
  #   Type: Number
  #   Default: 7

  # RegistryAlias:
  #   Type: String
  #   Description: Alias for ecr public registry containing the image

  # ImageName:
  #   Type: String
  #   Description: Name of the image

  # ImageTag:
  #   Type: String
  #   Description: Tag of the image

  # JobDefinitionName:
  #   Type: String
  #   Description: Name of the batch job definition

Resources:

  #################################### Crawler

  CrawlerCheckpointTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName:
        Fn::Sub: lake-ingest-understat-checkpoint-${Environment}

  #################################### Firehose

  FirehoseProcessingLambda:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../../../lambda/base/template.yaml
      Parameters:
        CodeUri: ../../lake/ingest/understat/firehose_transform/
        Description: Process firehose payloads for understat data
        FunctionName: understat-firehose-processing
        Role:
          Fn::GetAtt:
            - FirehoseProcessingLambdaRole
            - Arn
        Timeout: 120

  FirehoseProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  #################################### Feeds

  LeagueFeed:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./feed/template.yaml
      Parameters:
        Environment:
          Ref: Environment
        Feed: league
        ProcessingLambdaArn:
          Fn::GetAtt:
            - FirehoseProcessingLambda
            - Outputs.FunctionArn

  MatchFeed:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./feed/template.yaml
      Parameters:
        Environment:
          Ref: Environment
        Feed: match
        ProcessingLambdaArn:
          Fn::GetAtt:
            - FirehoseProcessingLambda
            - Outputs.FunctionArn

  #################################### Batch


  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EcsInstanceRole

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
        # TODO: Use custom role(s)
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: spotfleet.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceRoleForEC2SpotFleet

  AWSBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # TODO: Use a custom role
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub managed-ec2-environment-${Environment}
      ComputeResources:
        # AllocationStrategy: SPOT_CAPACITY_OPTIMIZED
        BidPercentage: 50
        InstanceRole: !GetAtt IamInstanceProfile.Arn
        InstanceTypes:
          - t2.micro
        MaxvCpus: 8
        MinvCpus: 0
        Subnets:
          - Fn::ImportValue:
              !Sub ec2-vpc-${Environment}:PublicSubnet1
          - Fn::ImportValue:
              !Sub ec2-vpc-${Environment}:PublicSubnet2
          - Fn::ImportValue:
              !Sub ec2-vpc-${Environment}:PublicSubnet3
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub ec2-vpc-${Environment}:NoIngressSecurityGroup
        SpotIamFleetRole: !GetAtt SpotFleetRole.Arn
        Type: SPOT
      ServiceRole: !GetAtt AWSBatchServiceRole.Arn
      State: ENABLED
      Type: MANAGED

#ComputeEnvironment:
#Type: AWS::Batch::ComputeEnvironment
#Properties:
#Type: MANAGED
#ComputeResources:
#Type: EC2
#MinvCpus: 0
#DesiredvCpus: 0
#MaxvCpus: 32
#InstanceTypes:
##- a1.medium
##        - optimal
##                Subnets:
##                        - Ref: Subnet
##                                SecurityGroupIds:
##                                        - Ref: SecurityGroup
##                                                InstanceRole:
##                                                          Ref: IamInstanceProfile
##                                                                ServiceRole:
##                                                                        Ref: BatchServiceRole


#  BatchProcessingJobDefinition:
#    Type: AWS::Batch::JobDefinition
#    Properties:
#      ContainerProperties:
#        Command:
#          # TODO: Edit this when everything is working
#          - python
#          - app/main.py
#          - --start-season
#          - "2021"
#        Environment:
#          - ENVIRONMENT: !Ref Environment
#          - DYNAMODB_TABLE: TODO
#          - LOG_LEVEL: TODO
#        # ExecutionRoleArn:  !GetAtt BatchTaskExecutionRole.Arn
#        Image: !Sub public.ecr.aws/${RegistryAlias}/${ImageName}:${ImageTag}
#        InstanceType: t2.micro #TODO Check this
#        # JobRoleArn: !GetAtt BatchTaskExecutionRole.Arn
#        LogConfiguration:
#          LogDriver:  awslogs
#          Options:
#          awslogs-group: !Ref 'BatchLogGroup'
#          awslogs-region: !Ref AWS::Region
#          awslogs-stream-prefix: !Sub ${StackName}-logs
#      Command:
#        ResourceRequirements:
#          - Type: VCPU
#            Value: 1
#          - Type: MEMORY
#            Value: 128
#      JobDefinitionName: !Sub ${JobDefinitionName}-job-definition-${Environment}
#      PlatformCapabilities:
#        - EC2
#      RetryStrategy:
#        Attempts: 2
#      Timeout: 3600
#      Type: container


#    Type: AWS::Batch::JobDefinition
#    Properties:
#      Type: container
#      PropagateTags: true
#      JobDefinitionName: BatchJobDefinition
#      ContainerProperties:
#      Image:
#      Fn::Join:
#      - ''
#      - - Ref: AWS::AccountId
#      - .dkr.ecr.
#      - Ref: AWS::Region
#      - !Sub '.amazonaws.com/${StackName}-repository:latest'
#      FargatePlatformConfiguration:
#      PlatformVersion: LATEST
#      ResourceRequirements:
#      - Value: 0.25
#      Type: VCPU
#      - Value: 512
#      Type: MEMORY
#      JobRoleArn:  !GetAtt 'BatchTaskExecutionRole.Arn'
#      ExecutionRoleArn:  !GetAtt 'BatchTaskExecutionRole.Arn'
#        - python
#        - app/main.py
#      PlatformCapabilities:
#        - EC2
#      Tags:
#      Service: Batch
#      Name: JobDefinitionTag
#      Expected: MergeTag

#  BatchLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      RetentionInDays: !Ref LogRetentionInDays
#      LogGroupName: !Sub /aws/batch/${AWS::StackName}

#  # BatchTaskExecutionRole:
#  #   Type: AWS::IAM::Role
#  #   Properties:
#  #     RoleName: !Sub ${StackName}-taskexec-role
#  #     AssumeRolePolicyDocument:
#  #       Statement:
#  #         - Effect: Allow
#  #           Principal:
#  #           Service: [ecs-tasks.amazonaws.com]
#  #           Action: ['sts:AssumeRole']
#  #     Policies:
#  #       - PolicyName: ecr-public
#  #         PolicyDocument:
#  #           Statement:
#  #             - Effect: Allow
#  #               Action:
#  #                 - ecr-public:GetAuthorizationToken
#  #                 - ecr-public:BatchCheckLayerAvailability
#  #                 - ecr-public:GetDownloadUrlForLayer
#  #                 - ecr-public:BatchGetImage
#  #                 - logs:CreateLogGroup
#  #                 - logs:CreateLogStream
#  #                 - logs:PutLogEvents
#  #               Resource: arn:aws:logs:*:*:*
#  #       - PolicyName: firehose
#  #         PolicyDocument:
#  #           Statement:
#  #             - Effect: Allow
#  #               Action:
#  #                 - s3:PutObject
#  #                 - s3:GetObject
#  #                 - s3:ListBucket
#  #               Resource:
#  #                 - !Join
#  #                 - ''
#  #                 - - 'arn:aws:s3:::'
#  #                 - !Sub "${StackName}-${AWS::AccountId}"
#  #                 - !Join
#  #                 - ''
#  #                 - - 'arn:aws:s3:::'
#  #                 - !Sub "${StackName}-${AWS::AccountId}"
#  #                 - /*
#  #       - PolicyName: dynamodb
#  #         PolicyDocument:
#  #           Statement:
#  #             - Effect: Allow
#  #               Action:
#  #                 - dynamodb:PutItem
#  #                 - dynamodb:GetItem
#  #               Resource: TODO
#  #                 # !Join
#  #                 # - ''
#  #                 # - - 'arn:aws:dynamodb:'
#  #                 # - !Sub "${AWS::Region}:${AWS::AccountId}:table/${StackName}"

#  BatchProcessingJobQueue:
#    Type: AWS::Batch::JobQueue
#    Properties:
#      JobQueueName: !Sub "ingest-understat-batch-queue-${Environment}"
#      State: ENABLED
#      Priority: 1
#      ComputeEnvironmentOrder:
#        - Order: 1
#      ComputeEnvironment: !Ref ComputeEnvironment

# AWSTemplateFormatVersion: 2010-09-09
# Description: >-
#   AWS CloudFormation Sample Template Managed High Priority and Low Priority
#   Batch Job Queue: This template demonstrates the usage of a high and low
#   priority batch job queues. It uses simple EC2 and Spot style Compute
#   Environments.  **WARNING** You will be billed for the AWS resources used if
#   you create a stack from this template.
# Resources:
#   VPC:
#     Type: 'AWS::EC2::VPC'
#     Properties:
#       CidrBlock: 10.0.0.0/16
#   InternetGateway:
#     Type: 'AWS::EC2::InternetGateway'
#   RouteTable:
#     Type: 'AWS::EC2::RouteTable'
#     Properties:
#       VpcId: !Ref VPC
#   VPCGatewayAttachment:
#     Type: 'AWS::EC2::VPCGatewayAttachment'
#     Properties:
#       VpcId: !Ref VPC
#       InternetGatewayId: !Ref InternetGateway
#   SecurityGroup:
#     Type: 'AWS::EC2::SecurityGroup'
#     Properties:
#       GroupDescription: Security Group for the EC2 instances launched into the VPC by Batch
#       VpcId: !Ref VPC
#   Subnet:
#     Type: 'AWS::EC2::Subnet'
#     Properties:
#       CidrBlock: 10.0.0.0/24
#       VpcId: !Ref VPC
#       MapPublicIpOnLaunch: 'True'
#   Route:
#     Type: 'AWS::EC2::Route'
#     Properties:
#       RouteTableId: !Ref RouteTable
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGateway
#   SubnetRouteTableAssociation:
#     Type: 'AWS::EC2::SubnetRouteTableAssociation'
#     Properties:
#       RouteTableId: !Ref RouteTable
#       SubnetId: !Ref Subnet
#   BatchServiceRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: batch.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
#   IamInstanceProfile:
#     Type: 'AWS::IAM::InstanceProfile'
#     Properties:
#       Roles:
#         - !Ref EcsInstanceRole
#   EcsInstanceRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: 2008-10-17
#         Statement:
#           - Sid: ''
#             Effect: Allow
#             Principal:
#               Service: ec2.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - >-
#           arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
#   SpotIamFleetRole:
#     Type: 'AWS::IAM::Role'
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: 2012-10-17
#         Statement:
#           - Sid: ''
#             Effect: Allow
#             Principal:
#               Service: spotfleet.amazonaws.com
#             Action: 'sts:AssumeRole'
#       ManagedPolicyArns:
#         - 'arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole'
#   ProdApplicationJob:
#     Type: 'AWS::Batch::JobDefinition'
#     Properties:
#       Type: container
#       ContainerProperties:
#         Image: !Join 
#           - ''
#           - - 137112412989.dkr.ecr.
#             - !Ref 'AWS::Region'
#             - '.amazonaws.com/amazonlinux:latest'
#         Vcpus: 2
#         Memory: 2000
#         Command:
#           - echo
#           - 'Hello World, I am a high priority job'
#       RetryStrategy:
#         Attempts: 1
#   TestApplicationJob:
#     Type: 'AWS::Batch::JobDefinition'
#     Properties:
#       Type: container
#       ContainerProperties:
#         Image: !Join 
#           - ''
#           - - 137112412989.dkr.ecr.
#             - !Ref 'AWS::Region'
#             - '.amazonaws.com/amazonlinux:latest'
#         Vcpus: 2
#         Memory: 2000
#         Command:
#           - echo
#           - 'Hello World, I am a low priority job'
#       RetryStrategy:
#         Attempts: 1
#   HighPriorityJobQueue:
#     Type: 'AWS::Batch::JobQueue'
#     Properties:
#       Priority: 1
#       ComputeEnvironmentOrder:
#         - Order: 1
#           ComputeEnvironment: !Ref OnDemandComputeEnvironment
#         - Order: 2
#           ComputeEnvironment: !Ref SpotComputeEnvironment
#   LowPriorityJobQueue:
#     Type: 'AWS::Batch::JobQueue'
#     Properties:
#       JobQueueName: LowPriorityBatchCloudformationJobqueue
#       Priority: 2
#       ComputeEnvironmentOrder:
#         - Order: 1
#           ComputeEnvironment: !Ref SpotComputeEnvironment
#   OnDemandComputeEnvironment:
#     Type: 'AWS::Batch::ComputeEnvironment'
#     Properties:
#       Type: MANAGED
#       ComputeResources:
#         Type: EC2
#         MinvCpus: 0
#         DesiredvCpus: 0
#         MaxvCpus: 64
#         InstanceTypes:
#           - optimal
#         Subnets:
#           - !Ref Subnet
#         SecurityGroupIds:
#           - !Ref SecurityGroup
#         InstanceRole: !Ref IamInstanceProfile
#       ServiceRole: !Ref BatchServiceRole
#   SpotComputeEnvironment:
#     Type: 'AWS::Batch::ComputeEnvironment'
#     Properties:
#       Type: MANAGED
#       ComputeResources:
#         Type: SPOT
#         MinvCpus: 0
#         DesiredvCpus: 0
#         MaxvCpus: 64
#         InstanceTypes:
#           - optimal
#         Subnets:
#           - !Ref Subnet
#         SecurityGroupIds:
#           - !Ref SecurityGroup
#         InstanceRole: !Ref IamInstanceProfile
#         BidPercentage: 40
#         SpotIamFleetRole: !Ref SpotIamFleetRole
#       ServiceRole: !Ref BatchServiceRole
# Outputs:
#   ProdApplicationJobArn:
#     Value: !Ref ProdApplicationJob
#   TestApplicationJobArn:
#     Value: !Ref TestApplicationJob
#   HighPriorityJobQueueArn:
#     Value: !Ref HighPriorityJobQueue
#   LowPriorityJobQueueArn:
#     Value: !Ref LowPriorityJobQueue
#   OnDemandComputeEnvironmentArn:
#     Value: !Ref OnDemandComputeEnvironment
#   SpotComputeEnvironmentArn:
#     Value: !Ref SpotComputeEnvironment

