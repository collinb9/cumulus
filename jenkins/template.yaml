AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Deploy Jenkins as an ECS service, along with all its required resources.

Parameters:

  Environment:
    Description: The account where the resources are being created
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - prod

  JenkinsImageUrl:
    Type: String
    Description: The url of the Jenkins docker image to deploy.

  DBStorage:
    Type: Number
    Description: Storage to assign DB instance
    Default: 5

  Enable:
    Type: String
    Description: Enable resources
    Default: false

  JenkinsContainerCpu:
    Type: Number
    Default: 128
    Description: How much CPU to give the container. 1024 is 1 CPU.

  JenkinsContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container.

  JenkinsContainerPort:
    Type: Number
    Default: 8080
    Description: >-
      Port on which the Jenkins controller docker container is listening for
      connections

  JenkinsJNLPPort:
    Type: Number
    Default: 50000
    Description: Port on which the Jenkins agents are listening for connections

Conditions:

  Enabled: !Equals
    - !Ref Enable
    - true

Resources:

################################################################################
## \/              Jenkins S3 bucket & access role configuration             \/ #
################################################################################

  JenkinsBucket:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../s3/base/template.yaml
      Parameters:
        Environment: !Ref Environment
        BucketName: jenkins
        Versioning: Suspended

  JenkinsExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
      - JenkinsBucket
    Properties:
      RoleName : !Sub jenkins-execution-role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  JenkinsRole:
    Type: AWS::IAM::Role
    DependsOn:
      - JenkinsBucket
    Properties:
      RoleName : !Sub jenkins-role-${Environment}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:GetMetricData
                  - cloudwatch:PutMetricData
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ecs:RegisterTaskDefinition
                  - ecs:ListClusters
                  - ecs:DescribeContainerInstances
                  - ecs:ListTaskDefinitions
                  - ecs:DescribeTaskDefinition
                  - ecs:DeregisterTaskDefinition
                  - tag:GetResources
                Resource: "*"
              - Action:
                  - ecs:ListContainerInstances
                Effect: Allow
                Resource:
                  - !GetAtt JenkinsAgentECSCluster.Arn
                  - !GetAtt JenkinsAgentECSCluster.Arn
              - Action:
                  - ecs:RunTask
                Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      - !GetAtt JenkinsAgentECSCluster.Arn
                      - !GetAtt JenkinsAgentECSCluster.Arn
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*
              - Action:
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Effect: Allow
                Condition:
                  ArnEquals:
                    ecs:cluster:
                      - !GetAtt JenkinsAgentECSCluster.Arn
                      - !GetAtt JenkinsAgentECSCluster.Arn
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - PolicyName: efs
          PolicyDocument:
            Statement:
             - Action:
                 - elasticfilesystem:DescribeAccessPoints
                 - elasticfilesystem:DescribeFileSystems
               Effect: Allow
               Resource: !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/*
        - PolicyName: iam
          PolicyDocument:
            Statement:
             - Action:
                 - iam:PassRole
                 - iam:GetRole
               Effect: Allow
               Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*
        - PolicyName: ssm
          PolicyDocument:
            Statement:
             - Action:
                 - ssm:GetParameter
                 - ssm:PutParameter
               Effect: Allow
               Resource:
               - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jenkins/*
        - PolicyName: secretsmanager
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                 - secretsmanager:GetSecretValue
                 - secretsmanager:ListSecrets
                Resource: "*"
        - PolicyName: jenkins-bucket
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt JenkinsBucket.Outputs.BucketArn
                  - Fn::Join:
                    - "/"
                    - - !GetAtt JenkinsBucket.Outputs.BucketArn
                      - "*"


################################################################################
# \/                      ECS Cluster configuration                         \/ #
################################################################################

  JenkinsECSCluster:
     Type: AWS::ECS::Cluster
     Properties :
       ClusterName : !Sub jenkins-ecs-cluster-${Environment}

  JenkinsAgentECSCluster:
     Type: AWS::ECS::Cluster
     Properties :
       ClusterName : !Sub jenkins-agent-ecs-cluster-${Environment}

  JenkinsAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub jenkins-agent-autoscaling-role-${Environment}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  JenkinsAutoScalingTarget:
    Condition: Enabled
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 2
      ResourceId: !Join
        - '/'
        - - service
          - !Ref JenkinsECSCluster
          - !GetAtt JenkinsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt JenkinsAutoScalingRole.Arn

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub jenkins-sg-${Environment}
      GroupDescription: Security group for Jenkins controller
      VpcId:
        Fn::ImportValue: !Sub ec2-vpc-${Environment}:VPC
      SecurityGroupIngress:
        # TODO: Only allow connections on port 8080
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub ecs-loadbalancer-${Environment}:LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref JenkinsJNLPPort
          ToPort: !Ref JenkinsJNLPPort
          SourceSecurityGroupId: !Ref JenkinsAgentSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref JenkinsJNLPPort
          ToPort: !Ref JenkinsJNLPPort
          CidrIp: 0.0.0.0/0  # needed for ALB healthchecks

  JenkinsAgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub jenkins-agent-sg-${Environment}
      GroupDescription: Security group for Jenkins agents
      VpcId:
        Fn::ImportValue: !Sub ec2-vpc-${Environment}:VPC

################################################################################
# \/                    Listeners and target groups                         \/ #
################################################################################

  JenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: Enabled
    Properties:
      # Name: !Sub jenkins-targetgroup-${Environment}
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Port: !Ref JenkinsContainerPort
      # Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub ec2-vpc-${Environment}:VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  JenkinsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: Enabled
    DependsOn:
      - JenkinsTargetGroup
    Properties:
      Actions:
        - TargetGroupArn: !Ref JenkinsTargetGroup
          Type: forward
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: x-amzn-ecs-service-name
            Values:
              - jenkins
      ListenerArn:
        Fn::ImportValue:
          !Sub ecs-loadbalancer-${Environment}:LoadBalancerListener
      Priority: 1

  JenkinsAgentTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref JenkinsJNLPPort
      Protocol: TCP
      VpcId:
        Fn::ImportValue:
          !Sub ec2-vpc-${Environment}:VPC
      TargetType: ip
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # JenkinsAgentListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref JenkinsAgentTargetGroup
  #     LoadBalancerArn:
  #       Fn::ImportValue:
  #         !Sub ecs-loadbalancer-${Environment}:LoadBalancer
  #     Port: !Ref JenkinsJNLPPort
  #     Protocol: TCP

###############################################################################
#\/                  Jenkins ECS service configuration                     \/ #
###############################################################################

  JenkinsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/jenkins-${Environment}
      RetentionInDays: 90

  JenkinsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: Enabled
    DependsOn:
      - JenkinsLogGroup
    Properties:
      Cpu: 1024
      # Family: !Sub jenkins-${Environment}
      RequiresCompatibilities:
        - FARGATE
      Memory: 3GB
      TaskRoleArn: !GetAtt JenkinsRole.Arn
      ExecutionRoleArn: !GetAtt JenkinsExecutionRole.Arn
      NetworkMode: awsvpc
      Volumes:
        - Name: jenkins-home
          EFSVolumeConfiguration:
            FilesystemId: !Ref JenkinsEFS
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref JenkinsEFSAccessPoint
              IAM: ENABLED
      ContainerDefinitions:
        - Name: !Sub jenkins-${Environment}
          Cpu: 1
          Image: !Ref JenkinsImageUrl
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref JenkinsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins
          PortMappings:
            - ContainerPort: !Ref JenkinsContainerPort
            - ContainerPort: !Ref JenkinsJNLPPort
          MountPoints:
            - SourceVolume: jenkins-home
              ContainerPath: /var/jenkins_home
          Environment:
            - Name: AGENT_EXECUTION_ROLE_ARN
              Value: !GetAtt JenkinsExecutionRole.Arn
            - Name: AGENT_TASK_ROLE_ARN
              Value: !GetAtt JenkinsRole.Arn
            - Name: AGENT_SECURITY_GROUP_ID
              Value: !Ref JenkinsAgentSecurityGroup
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ECS_AGENT_CLUSTER
              Value: !Ref JenkinsAgentECSCluster
            - Name: JENKINS_URL
              Value: !Join
                - ""
                - - http://
                  - Fn::ImportValue: !Sub ecs-loadbalancer-${Environment}:LoadBalancerDNSName
            - Name: LOG_GROUP_NAME
              Value: !Ref JenkinsLogGroup
            - Name: PRIVATE_JENKINS_HOST_AND_PORT
              Value: !Join
                - ''
                - - !GetAtt JenkinsServiceDiscovery.Name
                  - '.'
                  - !Ref AWS::StackName
                  - :50000
            - Name: SUBNET_IDS
              Value: !Join
                - ''
                - - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet1
                  - ','
                  - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet2
            - Name: JENKINS_USERNAME
              Value: ecsuser
            # - Name: JENKINS_URL
            #   Value:
            #     Fn::ImportValue: !Sub ecs-loadbalancer-${Environment}:LoadBalancerDNSName
            # - Name: JENKINS_HOST
            #   Value:
            #     Fn::ImportValue: !Sub ecs-loadbalancer-${Environment}:LoadBalancerDNSName
            # - Name: NLB_PORT
            #   Value: !Ref JenkinsJNLPPort
            # - Name: NLB_TARGET_GROUP_ARN
            #   Value: !Ref JenkinsAgentTargetGroup
            # - Name: NLB_DNS_NAME
            #   Value:
            #     Fn::ImportValue: !Sub ecs-loadbalancer-${Environment}:LoadBalancerDNSName
            # - Name: ECS_AGENT_CLUSTER
            #   Value: !GetAtt JenkinsAgentECSCluster.Arn
            # - Name: AWS_DEFAULT_REGION
            #   Value: !Ref AWS::Region
            # - Name: ACCOUNT_ID
            #   Value: !Ref AWS::AccountId
            # - Name: JENKINS_SLAVE_AGENT_PORT
            #   Value: !Ref JenkinsJNLPPort
            # - Name: AGENT_SECURITY_GROUP
            #   Value: !GetAtt JenkinsAgentSecurityGroup.GroupId
            # - Name: SUBNETS
            #   Value: !Join
            #     - ","
            #     - - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet1
            #       - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet2
            # - Name: VPC
            #   Value:
            #     Fn::ImportValue: !Sub ec2-vpc-${Environment}:VPC

  JenkinsAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - JenkinsLogGroup
    Properties:
      Cpu: 1024
      # Family: !Sub jenkins-${Environment}
      RequiresCompatibilities:
        - FARGATE
      Memory: 2GB
      TaskRoleArn: !GetAtt JenkinsRole.Arn
      ExecutionRoleArn: !GetAtt JenkinsExecutionRole.Arn
      NetworkMode: awsvpc
      # Volumes:
      #   - Name: jenkins-home
      #     EFSVolumeConfiguration:
      #       FilesystemId: !Ref JenkinsEFS
      #       TransitEncryption: ENABLED
      #       AuthorizationConfig:
      #         AccessPointId: !Ref JenkinsEFSAccessPoint
      #         IAM: ENABLED
      ContainerDefinitions:
        - Name: !Sub jenkins-agent-${Environment}
          Cpu: 1
          Image: jenkins/inbound-agent
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref JenkinsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins-agent
          PortMappings:
            - ContainerPort: !Ref JenkinsContainerPort
            - ContainerPort: !Ref JenkinsJNLPPort

  JenkinsService:
    Type: AWS::ECS::Service
    Condition: Enabled
    Properties:
      ServiceName: !Sub jenkins-ecs-service-${Environment}
      Cluster: !Ref JenkinsECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet1
            - Fn::ImportValue: !Sub ec2-vpc-${Environment}:PublicSubnet2
          SecurityGroups:
            - !Ref JenkinsSecurityGroup
      DesiredCount: 1
      TaskDefinition: !Ref JenkinsTaskDefinition
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub jenkins-${Environment}
          ContainerPort:  !Ref JenkinsContainerPort
          TargetGroupArn: !Ref JenkinsTargetGroup
        # - ContainerName: !Sub jenkins-${Environment}
        #   ContainerPort: !Ref JenkinsJNLPPort
        #   TargetGroupArn: !Ref JenkinsAgentTargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt JenkinsServiceDiscovery.Arn
          Port: !Ref JenkinsJNLPPort

  JenkinsPrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref AWS::StackName
      Vpc:
        Fn::ImportValue: !Sub ec2-vpc-${Environment}:VPC

  JenkinsServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: >-
        Discovery service to facilitate communication between Jenkins controller
        and nodes within the VPC
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      Name: jenkins
      NamespaceId: !Ref JenkinsPrivateNamespace
      Tags:
        - Key: application
          Value: !Sub jenkins-${Environment}
        - Key: application-type
          Value: ecs-service


###############################################################################
#\/                         EFS configuration                              \/ #
###############################################################################

  JenkinsEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub jenkins-efs-sg-${Environment}
      GroupDescription: Security group for Jenkins elastic loadbalancer
      VpcId:
        Fn::ImportValue: !Sub ec2-vpc-${Environment}:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref JenkinsSecurityGroup
      # SecurityGroupEgress:
      #   - IpProtocol: -1
      #     FromPort: -1
      #     ToPort: -1
      #     CidrIp: 0.0.0.0/0

  JenkinsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_60_DAYS
      FileSystemTags:
        - Key: application
          Value: !Sub jenkins-${Environment}
        - Key: application-type
          Value: ecs-service
      PerformanceMode: generalPurpose


  JenkinsEFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      AccessPointTags:
        - Key: application
          Value: !Sub jenkins-${Environment}
        - Key: application-type
          Value: ecs-service
      FileSystemId: !Ref JenkinsEFS
      PosixUser:
        Gid: 0
        Uid: 0
      RootDirectory:
        Path: /jenkins-home
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: 755

  JenkinsEFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SecurityGroups:
        - !Ref JenkinsEFSSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Sub ec2-vpc-${Environment}:PublicSubnet1

  JenkinsEFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SecurityGroups:
        - !Ref JenkinsEFSSecurityGroup
      SubnetId:
        Fn::ImportValue:
          !Sub ec2-vpc-${Environment}:PublicSubnet2

